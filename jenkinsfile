pipeline {
    agent any

    environment {
        AZURE_CREDENTIALS = credentials('azurecredentials')
        AZ_TENANT_ID = '4f7d0492-1764-4824-8f60-f15e6d51cd70'
        ACR_NAME = 'TravelWebApp'
        ACR_LOGIN_SERVER = "travelwebapp.azurecr.io"
        IMAGE_NAME = "travelapp-image"
    }

    stages {
        stage('Checkout Code') {
            steps {
                deleteDir()
                git url: 'https://github.com/MadhawaRathnayake/MERN---RenukaTravels-Tours.git', branch: 'main'
            }
        }

        stage('Login to ACR') {
            steps {
                script {
                    // Use Azure CLI to login to ACR
                    bat "az acr login --name %ACR_NAME%"
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Build the Docker image and push it to ACR
                    bat '''
                        docker build -t %ACR_LOGIN_SERVER%/%IMAGE_NAME% .
                        docker push %ACR_LOGIN_SERVER%/%IMAGE_NAME%
                    '''
                }
            }
        }

        stage('Get AKS Credentials') {
            steps {
                bat '''
                    az aks get-credentials --resource-group Travel_Agency --name TravelWebApp --overwrite-existing
                '''
            }
        }

        stage('Create Kubernetes Secret for ACR') {
            steps {
                bat '''
                    FOR /F "tokens=*" %%u IN ('az acr credential show -n %ACR_NAME% --query "username" -o tsv') DO (
                        FOR /F "tokens=*" %%p IN ('az acr credential show -n %ACR_NAME% --query "passwords[0].value" -o tsv') DO (
                            kubectl create secret docker-registry acr-auth ^
                                --docker-server=%ACR_LOGIN_SERVER% ^
                                --docker-username=%%u ^
                                --docker-password=%%p ^
                                --dry-run=client -o yaml | kubectl apply -f -
                        )
                    )
                '''
            }
        }

        stage('Apply Kubernetes Deployment') {
            steps {
                bat '''
                    kubectl apply -f kubernetes/deployment.yml
                    kubectl get deployments
                    kubectl rollout restart deployment travelapp-deployment
                    kubectl rollout status deployment travelapp-deployment
                '''
            }
        }

        stage('Post Actions') {
            steps {
                script {
                    // Handle failure in pipeline (optional)
                    currentBuild.result = 'SUCCESS'
                    echo "Pipeline execution completed successfully."
                }
            }
        }
    }
}
